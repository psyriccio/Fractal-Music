/*
 * MainGuiFrame.java
 *
 * Created on Sep 13, 2011, 12:55:55 PM
 */
package ca.vaskor.terry.fractalmusic.ui;

import java.util.concurrent.atomic.AtomicInteger;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

/**
 * The main frame containing the entire user interface.
 * 
 * @author Terry Vaskor
 */
public class MainGuiFrame extends javax.swing.JFrame {

    /**
     * Creates a new frame with default selections on all subpanels.
     */
    public MainGuiFrame() {
        this(null, null);
    }
    
    /**
     * Creates a new frame with specific selections on all subpanels.
     * 
     * @param sDat Selections that apply to any generated music.
     * @param gDat Selections that apply only to particular types of generated music.
     */
    public MainGuiFrame(SharedPanelData sDat, GeneratorPanelData gDat) {
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        numFrames.incrementAndGet();

        // Stuff auto-generated by NetBeans that needed modification to be
        // cross-compiler / cross-runtime.
        // It was in an area that claimed to be autogenerated, so it has been
        // extracted and placed here instead.
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
        
        heldPanel = new MainPanel(sDat, gDat);
        this.setContentPane(heldPanel);

        pack();
        addWindowListener(new WindowEventHandler());
    }

    /**
     * Create and display the GUI frame.
     * 
     * This is expected to be the main entry point for executed code.
     * 
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGuiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGuiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGuiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGuiFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MainGuiFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    private static AtomicInteger numFrames = new AtomicInteger(0);
    
    // Exit the application if no windows are open.
    private class WindowEventHandler extends WindowAdapter {
        @Override
        public void windowClosing(WindowEvent e) {
            // Stop MIDI if it's playing.
            ca.vaskor.terry.fractalmusic.lib.MIDISequenceCreator msc = heldPanel.getMIDISequenceCreator();
            if (msc != null) {
                msc.haltExecution();
            }
            
            // Decrement the number of open frames.
            // If this hits zero, then quit.
            int currentNumFrames = numFrames.decrementAndGet();
            if (currentNumFrames == 0) {
                System.exit(0);
            }
        }
    }
    
    private MainPanel heldPanel;
}
